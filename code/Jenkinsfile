pipeline {
  agent any
  tools {nodejs 'nodejs14'}
  environment {
    DEV_BUCKET = 'dev.tusker.ai'
    PROD_BUCKET = 'beta.tusker.ai'
    CI = 'false'
  }
  stages {
    stage('build dev') {
		when {
			branch 'development'
		}
		steps {
    		echo 'starting build'
    		bitbucketStatusNotify(buildState: 'INPROGRESS')
    		sh 'rm package-lock.json'
    		sh 'npm install'
    		sh 'npm run build:dev'
    		echo 'end build'
		  }
	    post {
			success{
				echo "dev build successful"
			}
			failure{
				echo "dev build failed"
			}
		}
	}
	stage('build prod') {
		when {
			branch 'master'
		}
		steps {
    		echo 'starting build'
    		bitbucketStatusNotify(buildState: 'INPROGRESS')
    		sh 'rm package-lock.json'
    		sh 'npm install'
    		sh 'npm run build:prod'
    		echo 'end build'
		  }
	    post {
			success{
				echo "prod build successful"
			}
			failure{
				echo "prod build failed"
			}
		}
	}
    stage('deploy to dev') {
      when {
		branch 'development'
	  }
      steps {
        echo 'start dev deployment'
        sh 'aws s3 cp --recursive --acl public-read ./build/ s3://$DEV_BUCKET --cache-control max-age=0,no-cache,no-store,must-revalidate'
        echo 'end dev deployment'
      }
      post {
			success{
				echo "deploy successful to dev"
			}
			failure{
				echo "deploy failed in dev"
			}
		}
    }
    
    stage('deploy to production') {
      when {
		branch 'master'
	  }
      steps {
        echo 'start production deployment'
        sh 'aws s3 cp --recursive --acl public-read ./build/ s3://$PROD_BUCKET --cache-control max-age=0,no-cache,no-store,must-revalidate'
        echo 'end production deployment'
      }
      post {
			success{
				echo "deploy successful to production"
			}
			failure{
				echo "deploy failed in production"
			}
		}
    }
  }
  post {
	success{
		echo "pipeline execution successful"
		bitbucketStatusNotify(buildState: 'SUCCESSFUL')
	}
	failure{
		echo "pipeline execution failed"
		bitbucketStatusNotify(buildState: 'FAILED')
	}
  }
}

